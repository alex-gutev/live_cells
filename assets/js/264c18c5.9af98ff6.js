"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[295],{6869:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>r});var i=n(4848),l=n(8453);const s={title:"Live Cell Widgets",description:"Live cell widgets library",sidebar_position:4},d="Live Cell Widgets",c={id:"basics/live-cell-widgets",title:"Live Cell Widgets",description:"Live cell widgets library",source:"@site/docs/basics/live-cell-widgets.md",sourceDirName:"basics",slug:"/basics/live-cell-widgets",permalink:"/docs/basics/live-cell-widgets",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Live Cell Widgets",description:"Live cell widgets library",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Cell Expressions",permalink:"/docs/basics/cell-expressions"},next:{title:"Two-way Data Flow",permalink:"/docs/basics/two-way-data-flow"}},o={},r=[{value:"Text Fields",id:"text-fields",level:2}];function a(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"live-cell-widgets",children:"Live Cell Widgets"}),"\n",(0,i.jsxs)(t.p,{children:["Besides the core cell functionality, this package comes with a\n",(0,i.jsx)(t.code,{children:"live_cells_ui"})," library which provides a collection of widgets that\nextend the stock Flutter widgets with functionality which allows their\nproperties to be observed and controlled by cells."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["The name of a Live Cells equivalent of a Flutter widget is ",(0,i.jsx)(t.code,{children:"Live"}),"\nfollowed by the name of the widget class."]})}),"\n",(0,i.jsx)(t.p,{children:"When a cell is given as a parameter for a widget property, the\nproperty is said to be bound to the cell. This means that when the\nvalue of the cell changes, the value of the property is automatically\nupdated to reflect the value of the cell. Similarly, when the value of\nthe property changes due to user interaction, the value of the cell is\nupdated to reflect the state of the widget."}),"\n",(0,i.jsxs)(t.p,{children:["For example the ",(0,i.jsx)(t.code,{children:"LiveSwitch"})," widget is a ",(0,i.jsx)(t.code,{children:"Switch"})," which takes a cell\nfor its ",(0,i.jsx)(t.code,{children:"value"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",metastring:'title="LiveSwitch example"',children:"CellWidget.builder((c) {\n    final state = MutableCell(false);\n    \n    return Column(\n        children: [\n            Text(state() ? 'On' : 'Off'),\n            LiveSwitch(\n                value: state\n            ),\n            ElevatedButton(\n                child: Text('Reset'),\n                onPressed: () => state.value = false\n            )\n        ]\n    );\n});\n"})}),"\n",(0,i.jsx)(t.p,{children:"In this example:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.code,{children:"LiveSwitch"})," is created with its ",(0,i.jsx)(t.code,{children:"value"})," property bound to the\ncell ",(0,i.jsx)(t.code,{children:"state"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["The initial value of the ",(0,i.jsx)(t.code,{children:"state"})," cell is ",(0,i.jsx)(t.code,{children:"false"})," hence the switch\nis initially in the ",(0,i.jsx)(t.em,{children:"off"})," position."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:['The state of the switch, initially "Off" is displayed in a ',(0,i.jsx)(t.code,{children:"Text"}),"\nwidget above the switch."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["When the switch is turned to on by the user, the value of the\n",(0,i.jsx)(t.code,{children:"state"})," cell is updated to ",(0,i.jsx)(t.code,{children:"true"}),' and "On" is displayed in the\n',(0,i.jsx)(t.code,{children:"Text"})," widget."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Likewise, when the switch is turned off the value of the ",(0,i.jsx)(t.code,{children:"state"}),"\ncell is updated to ",(0,i.jsx)(t.code,{children:"false"}),' and "Off" is displayed in the ',(0,i.jsx)(t.code,{children:"Text"}),"\nwidget."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:['The "Reset" button below the switch sets the value of the ',(0,i.jsx)(t.code,{children:"state"})," cell\nto ",(0,i.jsx)(t.code,{children:"false"}),", which results in the switch widget resetting to the ",(0,i.jsx)(t.em,{children:"off"}),'\nposition and "Off" being displayed.']}),"\n",(0,i.jsxs)(t.p,{children:["Notice that user input was handled entirely in a declarative\nmanner. There was no need to provide an ",(0,i.jsx)(t.code,{children:"onChanged"})," callback, nor any\nneed to call ",(0,i.jsx)(t.code,{children:"setState"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"text-fields",children:"Text Fields"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"LiveTextField"})," is another widget provided by this library that allows\nuser input to be observed and handled using cells. Unlike ",(0,i.jsx)(t.code,{children:"TextField"}),"\nwhich takes a ",(0,i.jsx)(t.code,{children:"TextEditingController"}),", ",(0,i.jsx)(t.code,{children:"LiveTextField"})," takes a\n",(0,i.jsx)(t.code,{children:"content"})," cell which is bound to the content of the field. It also\ntakes an optional ",(0,i.jsx)(t.code,{children:"selection"})," cell which is bound to the selection."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"content"})," cell can be used both to observe and set the content of\nthe field. Here's a simple example that echoes whatever is written in\nthe field to a ",(0,i.jsx)(t.code,{children:"Text"})," widget."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",metastring:'title="LiveTextField example"',children:"CellWidget.builder((c) {\n    final content = MutableCell('');\n    \n    return Column(\n        children: [\n            Text(content()),\n            LiveTextField(\n                content: content\n            ),\n            ElevatedButton(\n                child: Text('Clear'),\n                onPressed: () => content.value = ''\n            )\n        ]\n    );\n});\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Like the ",(0,i.jsx)(t.code,{children:"LiveSwitch"})," example, we didn't need an ",(0,i.jsx)(t.code,{children:"onChanged"})," callback\nnor did we need to add a listener to a ",(0,i.jsx)(t.code,{children:"TextEditingController"}),'\nobject. The "Clear" button clears the content of the text field by\nsetting the value of the ',(0,i.jsx)(t.code,{children:"content"})," cell to the empty string."]}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsxs)(t.p,{children:["If you provide a cell for the ",(0,i.jsx)(t.code,{children:"selection"})," property of ",(0,i.jsx)(t.code,{children:"LiveTextField"}),",\nit has to be reset as well as the content cell when clearing the text field."]})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var i=n(6540);const l={},s=i.createContext(l);function d(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);