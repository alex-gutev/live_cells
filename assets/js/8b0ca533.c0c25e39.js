"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[182],{1974:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(4848),l=t(8453);const i={title:"Error Handling",description:"How to handle errors using two-way data flow",sidebar_position:6},a="Error Handling",s={id:"basics/error-handling",title:"Error Handling",description:"How to handle errors using two-way data flow",source:"@site/docs/basics/error-handling.md",sourceDirName:"basics",slug:"/basics/error-handling",permalink:"/live_cells/docs/basics/error-handling",draft:!1,unlisted:!1,editUrl:"https://github.com/alex-gutev/live_cells/docs/basics/error-handling.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Error Handling",description:"How to handle errors using two-way data flow",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Two-way Data Flow",permalink:"/live_cells/docs/basics/two-way-data-flow"},next:{title:"State Restoration",permalink:"/live_cells/docs/basics/state-restoration"}},o={},d=[{value:"Maybe Cells",id:"maybe-cells",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In the previous section we introduced how to handle numeric input\nusing mutable computed cells. However, we glossed over what happens if\nthe user enters invalid input."}),"\n",(0,r.jsxs)(n.p,{children:["When a cells created by ",(0,r.jsx)(n.code,{children:"mutableString()"})," is assigned a string which\ndoes not represent a valid number, a default value of ",(0,r.jsx)(n.code,{children:"0"})," is\nassigned. This default value can be changed using the ",(0,r.jsx)(n.code,{children:"errorValue"}),"\nargument:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",metastring:'title="Example of mutableString(errorValue: ...)"',children:"final a = MutableCell<num>(0);\n\nfinal strA = a.mutableString(\n  errorValue: -1.cell\n);\n\nstrA.value = 'not a valid number';\n\nprint(a.value); // Prints -1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, cell ",(0,r.jsx)(n.code,{children:"a"})," is assigned a value of ",(0,r.jsx)(n.code,{children:"-1"})," if ",(0,r.jsx)(n.code,{children:"strA"})," is\nassigned a string which does not represent a valid number."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"errorValue"})," is a cell, which allows the default value to be\nchanged dynamically."]})}),"\n",(0,r.jsx)(n.h2,{id:"maybe-cells",children:"Maybe Cells"}),"\n",(0,r.jsxs)(n.p,{children:["This error handling strategy might be sufficient for some cases but\nusually, we want to detect and handle the error rather than assigning\na default value. This can be done with ",(0,r.jsx)(n.code,{children:"Maybe"})," cells. A ",(0,r.jsx)(n.code,{children:"Maybe"})," object\neither holds a value or an exception that was thrown while computing a\nvalue."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"Maybe"})," cell can easily be created from a",(0,r.jsx)(n.code,{children:"MutableCell"})," with the\n",(0,r.jsx)(n.code,{children:"maybe()"})," method. The resulting ",(0,r.jsx)(n.code,{children:"Maybe"})," cell is a mutable computed\ncell with the following behaviour:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Its computed value is the value of the argument cell wrapped in a\n",(0,r.jsx)(n.code,{children:"Maybe"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When the cell's value is set, it sets the value of the argument cell\nto the value wrapped in the ",(0,r.jsx)(n.code,{children:"Maybe"})," if it is holding a value."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Maybe"})," cell provides an ",(0,r.jsx)(n.code,{children:"error"})," property which retrieves a\n",(0,r.jsx)(n.code,{children:"ValueCell"})," that evaluates to the exception held in the ",(0,r.jsx)(n.code,{children:"Maybe"})," or\n",(0,r.jsx)(n.code,{children:"null"})," if the ",(0,r.jsx)(n.code,{children:"Maybe"})," is holding a value. This can be used to\ndetermine whether an error occurred while computing a value."]}),"\n",(0,r.jsxs)(n.p,{children:["To handle errors while parsing a number, ",(0,r.jsx)(n.code,{children:"mutableString"})," should be\ncalled on a cell containing a ",(0,r.jsx)(n.code,{children:"Maybe<num>"})," rather than a ",(0,r.jsx)(n.code,{children:"num"}),". We can\nthen check whether the ",(0,r.jsx)(n.code,{children:"error"})," cell is non-null to check if an error\noccurred."]}),"\n",(0,r.jsx)(n.p,{children:"Putting it all together a text field for numeric input, which displays\nan error message when an invalid value is entered, can be implemented\nwith the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",metastring:'title="Numeric text field with error handling"',children:"Widget numberField(MutableCell<num> n) => StaticWidget.builder((_) {\n    final maybe = n.maybe();\n    final error = maybe.error;\n    \n    return CellTextField(\n        content: maybe.mutableString(),\n        decoration: ValueCell.computed(() => InputDecoration(\n            errorText: error() != null \n              ? 'Please enter a valid number' \n              : null\n       ))\n    );\n});\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"We've packaged the input field in a function which takes the cell to\nwhich to bind the content of the field as an argument. This allows us\nto reuse this error handling logic wherever a numeric input text field\nis required."})}),"\n",(0,r.jsxs)(n.p,{children:["Here we're testing whether ",(0,r.jsx)(n.code,{children:"error"})," is non-null, that is whether an\nerror occurred while parsing a number from the text field, and if so\nproviding an error message in the ",(0,r.jsx)(n.code,{children:"errorText"})," of the\n",(0,r.jsx)(n.code,{children:"InputDecoration"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The error message can be made more descriptive by also checking\nwhether the field is empty, or not:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",metastring:'title="Numeric text field with error handling"',children:"Widget numberField(MutableCell<num> n) => StaticWidget.builder((_) {\n    final maybe = n.maybe();\n    final error = maybe.error;\n    final content = n.mutableString();\n    \n    return CellTextField(\n        content: content,\n        decoration: ValueCell.computed(() => InputDecoration(\n            errorText: content().isEmpty ? \n              ? 'Cannot be empty'\n              : error() != null \n              ? 'Please enter a valid number' \n              : null\n       ))\n    );\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now that we have a reusable numeric input text field with error\nhandling, defined in ",(0,r.jsx)(n.code,{children:"numberField()"}),", let's use it to reimplement the\nsum example from earlier."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",metastring:'title="Sum example using numberField()"',children:"Widget example() => StaticWidget.builder((_) {\n    final a = MutableCell<num>(0);\n    final b = MutableCell<num>(0);\n    \n    final sum = a + b;\n    \n    return Column(\n        children: [\n            Row(\n                children: [\n                    numberField(a),\n                    SizedBox(width: 5),\n                    Text('+'),\n                    SizedBox(width: 5),\n                    numberField(b),\n                ],\n            ),\n            CellText(\n                data: ValueCell.computed(\n                    () => '${a()} + ${b()} = ${sum()}'\n                )\n            ),\n            ElevatedButton(\n                child: Text('Reset'),\n                onPressed: () => MutableCell.batch(() {\n                    a.value = 0;\n                    b.value = 0;\n                })\n            )\n        ]\n    );\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Notice how we were able to package our text field with error handling\nin a separate function, that can be reused, all without writing a\nsingle ",(0,r.jsx)(n.code,{children:"onChanged"})," callback and at the same time being able to reset\nthe content of the fields simply by changing the values of the cells\nholding our data."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const l={},i=r.createContext(l);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);