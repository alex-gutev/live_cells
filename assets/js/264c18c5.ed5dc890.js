"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[295],{6869:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var l=n(4848),i=n(8453);const s={title:"Live Cell Widgets",description:"Live cell widgets library",sidebar_position:4},c="Live Cell Widgets",d={id:"basics/live-cell-widgets",title:"Live Cell Widgets",description:"Live cell widgets library",source:"@site/docs/basics/live-cell-widgets.md",sourceDirName:"basics",slug:"/basics/live-cell-widgets",permalink:"/docs/basics/live-cell-widgets",draft:!1,unlisted:!1,editUrl:"https://github.com/alex-gutev/live_cells/docs/basics/live-cell-widgets.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Live Cell Widgets",description:"Live cell widgets library",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Cell Expressions",permalink:"/docs/basics/cell-expressions"},next:{title:"Two-way Data Flow",permalink:"/docs/basics/two-way-data-flow"}},o={},a=[{value:"User input",id:"user-input",level:2},{value:"Static Widgets",id:"static-widgets",level:2}];function r(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.h1,{id:"live-cell-widgets",children:"Live Cell Widgets"}),"\n",(0,l.jsx)(t.p,{children:"Besides the core cell functionality, this library also comes with a\ncollection of widgets that extend the stock Flutter widgets with\nfunctionality which allows their properties to be accessed and\ncontrolled by cells."}),"\n",(0,l.jsxs)(t.p,{children:["Quite a mouthful. Let's start with the simple ",(0,l.jsx)(t.code,{children:"Text"})," widget for\ndisplaying text. Live cells provides a ",(0,l.jsx)(t.code,{children:"CellText"})," widget with a\nconstructor that takes the same parameters as the constructor of\n",(0,l.jsx)(t.code,{children:"Text"})," but allows ",(0,l.jsx)(t.code,{children:"ValueCell"}),"s to be given instead of the raw values."]}),"\n",(0,l.jsx)(t.admonition,{type:"tip",children:(0,l.jsxs)(t.p,{children:["The name of a Live Cells equivalent of a Flutter widget is ",(0,l.jsx)(t.code,{children:"Cell"}),"\nfollowed by the name of the widget class."]})}),"\n",(0,l.jsx)(t.p,{children:"When a cell is given as a parameter for a widget property, the\nproperty is said to be bound to the cell. This means that when the\nvalue of the cell changes, the value of the property is automatically\nupdated to reflect the value of the cell."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",metastring:'title="CellText example"',children:"Widget example() => CellWidget.builder((c) {\n\tfinal content = c.cell(() => MutableCell(''));\n\t\n\treturn Column(\n\t\tchildren: [\n\t\t\tCellText(data: content),\n\t\t\tElevatedButton(\n\t\t\t\tchild: Text('Say Hi'),\n\t\t\t\tonPressed: () => content.value = 'Hi!'\n\t\t\t)\n\t\t]\n\t);\n});\n"})}),"\n",(0,l.jsxs)(t.p,{children:["In the example above a ",(0,l.jsx)(t.code,{children:"CellText"})," is created with its data property bound to the\ncell ",(0,l.jsx)(t.code,{children:"content"}),", which initially holds the empty string. The button\nbelow sets the value of ",(0,l.jsx)(t.code,{children:"content"}),' to the string "Hi!". This value is\nthen displayed in the ',(0,l.jsx)(t.code,{children:"CellText"})," widget."]}),"\n",(0,l.jsxs)(t.admonition,{type:"danger",children:[(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"Do not"})," change the cell to which a widget property is bound, i.e. don't\ndo this:"]}),(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"CellText(data: condition ? cell1 : cell2)\n"})}),(0,l.jsx)(t.p,{children:"Instead change the value of the cell and put the condition inside a\ncomputed cell."})]}),"\n",(0,l.jsxs)(t.p,{children:["Every widget provided by live cells also provides a ",(0,l.jsx)(t.code,{children:"bind"}),"\nmethod. This method creates a copy of the widget with the properties\nbound to different cells."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",metastring:'title="bind method"',children:"final text = CellText()\n\t.data(content) // Copy CellText with `data` bound to `content`\n\t.style(style); // Copy CellText with a new binding for `style`\n"})}),"\n",(0,l.jsx)(t.h2,{id:"user-input",children:"User input"}),"\n",(0,l.jsx)(t.p,{children:"Cells can be used for more than just setting and automatically\nupdating the values of widget properties. They can also be used to\nretrieve and observe the values of widget properties."}),"\n",(0,l.jsxs)(t.p,{children:["Widgets which are used for retrieving input from the user, take\nmutable cells for the properties which represent the user input. For\nexample ",(0,l.jsx)(t.code,{children:"CellSwitch"}),", the Live Cells equivalent of Flutter's ",(0,l.jsx)(t.code,{children:"Switch"}),"\ntakes a mutable cell for its ",(0,l.jsx)(t.code,{children:"value"})," property, which represents the\nstate of the switch. Setting the value of the cell updates the state\nof the switch, similarly when the user changes the state of\nthe switch, the value of the cell is changed to reflect the state."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",metastring:'title="CellSwitch example"',children:"Widget example() => CellWidget.builder((c) {\n\tfinal state = c.cell(() => MutableCell(false));\n\tfinal text = c.cell(() => state.select(\n\t\t'The switch is on'.cell,\n\t\t'The switch is off'.cell\n\t));\n\t\n\treturn Column(\n\t\tchildren: [\n\t\t\tCellText(data: text),\n\t\t\tCellSwitch(value: state),\n\t\t]\n\t);\n});\n"})}),"\n",(0,l.jsx)(t.p,{children:"In this example:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["The state (",(0,l.jsx)(t.code,{children:"value"}),") of the switch is bound to cell ",(0,l.jsx)(t.code,{children:"state"}),"."]}),"\n",(0,l.jsxs)(t.li,{children:["The ",(0,l.jsx)(t.code,{children:"state"})," cell is used by cell ",(0,l.jsx)(t.code,{children:"text"})," to select between two\nstrings describing the state of the switch."]}),"\n",(0,l.jsxs)(t.li,{children:["The content (",(0,l.jsx)(t.code,{children:"data"}),") of the ",(0,l.jsx)(t.code,{children:"CellText"})," widget is bound to cell ",(0,l.jsx)(t.code,{children:"text"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Toggling the switch automatically changes the value of the ",(0,l.jsx)(t.code,{children:"state"}),"\ncell and hence changes the text that is displayed in the ",(0,l.jsx)(t.code,{children:"CellText"}),"\nwidget."]}),"\n",(0,l.jsxs)(t.p,{children:["Notice how user input was handled in a declarative manner entirely\nusing cells. There was no need for ",(0,l.jsx)(t.code,{children:"onChanged"})," callbacks, in-fact\n",(0,l.jsx)(t.code,{children:"CellSwitch"})," doesn't even take an ",(0,l.jsx)(t.code,{children:"onChanged"})," argument."]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.code,{children:"CellTextField"})," is another widget which uses cells to handle user\ninput. Unlike ",(0,l.jsx)(t.code,{children:"TextField"})," which takes a ",(0,l.jsx)(t.code,{children:"TextEditingController"}),",\n",(0,l.jsx)(t.code,{children:"CelltextField"})," takes a ",(0,l.jsx)(t.code,{children:"content"})," cell which is bound to the content\nof the field. It also takes an optional ",(0,l.jsx)(t.code,{children:"selection"})," cell which is\nbound to the selection."]}),"\n",(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.code,{children:"content"})," cell can be used both to observe and set the content of\nthe field. Here's a simple example that echoes whatever is written in\nthe field to a ",(0,l.jsx)(t.code,{children:"CellText"})," widget."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",metastring:'title="CellTextField example"',children:"Widget example() => CellWidget.builder((c) {\n\tfinal content = c.cell(() => MutableCell(''));\n\t\n\treturn Column(\n\t\tchildren: [\n\t\t\tCellText(data: content),\n\t\t\tCellTextField(content: content),\n\t\t\tElevatedButton(\n\t\t\t\tchild: Text('Clear'),\n\t\t\t\tonPressed: () => content.value = ''\n\t\t\t)\n\t\t]\n\t);\n});\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Like the ",(0,l.jsx)(t.code,{children:"CellSwitch"})," example, we didn't need an ",(0,l.jsx)(t.code,{children:"onChanged"})," callback\nnor did we need to add a listener to a ",(0,l.jsx)(t.code,{children:"TextEditingController"}),'\nobject. This example also adds a "Clear" button which clears the\ncontent of the text field by setting the value of the ',(0,l.jsx)(t.code,{children:"content"})," cell\nto the empty string."]}),"\n",(0,l.jsx)(t.admonition,{type:"tip",children:(0,l.jsxs)(t.p,{children:["The approach used to clear the content of the ",(0,l.jsx)(t.code,{children:"CellTextField"})," in this\nexample, setting the value of the content cell, can also be used to\nreset the state of a ",(0,l.jsx)(t.code,{children:"CellSwitch"})," and any other widget property which\nis bound to a mutable cell."]})}),"\n",(0,l.jsx)(t.admonition,{type:"caution",children:(0,l.jsxs)(t.p,{children:["If you provide a cell for the ",(0,l.jsx)(t.code,{children:"selection"})," property of ",(0,l.jsx)(t.code,{children:"CellTextField"}),",\nit has to be reset as well as the content cell when clearing the text field."]})}),"\n",(0,l.jsx)(t.h2,{id:"static-widgets",children:"Static Widgets"}),"\n",(0,l.jsxs)(t.p,{children:["What has probably become an annoyance throughout these examples is\nhaving to use the ",(0,l.jsx)(t.code,{children:"cell"})," method to create the cells which are bound to\nwidget properties. In these examples we don't need to observe the\nvalues of cells directly in the ",(0,l.jsx)(t.code,{children:"CellWidget"}),", nor does the structure\nof the widget change between builds. This is where ",(0,l.jsx)(t.code,{children:"StaticWidget"}),"\ncomes in handy."]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.code,{children:"StaticWidget.builder"})," creates a widget with a build function that is\nonly called when the widget is inserted in the tree for the first\ntime. When the ",(0,l.jsx)(t.code,{children:"StaticWidget"})," is rebuilt, the same widget that was\nreturned by the build function during the first build is\nreturned. This allows us to define our cells directly in the build\nfunction without having to use the ",(0,l.jsx)(t.code,{children:"cell"})," method."]}),"\n",(0,l.jsxs)(t.p,{children:["With ",(0,l.jsx)(t.code,{children:"StaticWidget"})," the ",(0,l.jsx)(t.code,{children:"CellSwitch"})," example becomes:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",metastring:'title="StaticWidget example"',children:"Widget example() => StaticWidget.builder((c) {\n\tfinal state = MutableCell(false);\n\t\n\treturn Column(\n\t\tchildren: [\n\t\t\tCellText(\n\t\t\t  data: state.select(\n\t\t\t\t  'The switch is on'.cell,\n\t\t\t\t  'The switch is off'.cell\n\t\t\t  )\n\t\t    ),\n\t\t\tCellSwitch(value: state),\n\t\t]\n\t);\n});\n"})}),"\n",(0,l.jsxs)(t.p,{children:["And the ",(0,l.jsx)(t.code,{children:"CellTextField"})," example becomes:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",metastring:'title="CellText example with StaticWidget"',children:"Widget example() => StaticWidget.builder((c) {\n\tfinal content = MutableCell('');\n\t\n\treturn Column(\n\t\tchildren: [\n\t\t\tCellText(data: content),\n\t\t\tCellTextField(content: content),\n\t\t\tElevatedButton(\n\t\t\t\tchild: Text('Clear'),\n\t\t\t\tonPressed: () => content.value = ''\n\t\t\t)\n\t\t]\n\t);\n});\n"})}),"\n",(0,l.jsx)(t.admonition,{type:"tip",children:(0,l.jsxs)(t.p,{children:["Like ",(0,l.jsx)(t.code,{children:"CellWidget"}),", subclassing ",(0,l.jsx)(t.code,{children:"StaticWidget"})," and overriding the ",(0,l.jsx)(t.code,{children:"build"}),"\nmethod is equivalent to using ",(0,l.jsx)(t.code,{children:"StaticWidget.builder"}),"."]})}),"\n",(0,l.jsxs)(t.p,{children:["If you know that your widget is only going to be used inside a\n",(0,l.jsx)(t.code,{children:"StaticWidget"}),", you can even eliminate ",(0,l.jsx)(t.code,{children:"StaticWidget.builder"})," entirely\nand define your widget as a function:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",metastring:'title="CellText example as a function"',children:"Widget example() {\n\tfinal content = MutableCell('');\n\t\n\treturn Column(\n\t\tchildren: [\n\t\t\tCellText(data: content),\n\t\t\tCellTextField(content: content),\n\t\t\tElevatedButton(\n\t\t\t\tchild: Text('Clear'),\n\t\t\t\tonPressed: () => content.value = ''\n\t\t\t)\n\t\t]\n\t);\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>d});var l=n(6540);const i={},s=l.createContext(i);function c(e){const t=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),l.createElement(s.Provider,{value:t},e.children)}}}]);