"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[478],{7164:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var t=n(4848),a=n(8453);const s={title:"Eager and Lazy Cells",description:"Controlling the evaluation strategy of cells",sidebar_position:3},i="Eager and Lazy Cells",c={id:"advanced/eager-lazy-cells",title:"Eager and Lazy Cells",description:"Controlling the evaluation strategy of cells",source:"@site/docs/advanced/eager-lazy-cells.md",sourceDirName:"advanced",slug:"/advanced/eager-lazy-cells",permalink:"/docs/advanced/eager-lazy-cells",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Eager and Lazy Cells",description:"Controlling the evaluation strategy of cells",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Lightweight Computed Cells",permalink:"/docs/advanced/lightweight-cells"}},r={},o=[{value:"Eager Cells",id:"eager-cells",level:2}];function d(e){const l={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.h1,{id:"eager-and-lazy-cells",children:"Eager and Lazy Cells"}),"\n",(0,t.jsxs)(l.p,{children:["Stateful computed cells, created with ",(0,t.jsx)(l.code,{children:"ValueCell.computed"})," are lazy by\ndefault. This means the value of the cell is only computed, if it is\nactually referenced. If the value of a computed is never referenced,\nit is never computed, even if the computed cell is being observed."]}),"\n",(0,t.jsx)(l.admonition,{type:"note",children:(0,t.jsx)(l.p,{children:"The value of a lazy computed cell is cached until its argument cells\nchange, but its not computed until it is referenced for the first\ntime."})}),"\n",(0,t.jsx)(l.h2,{id:"eager-cells",children:"Eager Cells"}),"\n",(0,t.jsx)(l.p,{children:"An eager computed cell always recomputes its value when its argument\ncells change. The following cells, for example, are eager:"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsxs)(l.li,{children:["Previous value cells (created with ",(0,t.jsx)(l.code,{children:".previous"}),")"]}),"\n",(0,t.jsxs)(l.li,{children:["Asynchronous cells (created with ",(0,t.jsx)(l.code,{children:".wait"}),", ",(0,t.jsx)(l.code,{children:".waitLast"}),", ",(0,t.jsx)(l.code,{children:".awaited"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(l.p,{children:["A computed cell can be made eager by providing a value of ",(0,t.jsx)(l.code,{children:"true"})," to\nthe ",(0,t.jsx)(l.code,{children:"changesOnly"})," argument of ",(0,t.jsx)(l.code,{children:"ValueCell.computed"}),". This also changes\nthe behaviour of the cell, such that it only notifies its observers\nof changes to its value, only if the value has actually changed."]}),"\n",(0,t.jsx)(l.p,{children:"Example:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-dart"})})]})}function u(e={}){const{wrapper:l}={...(0,a.R)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,l,n)=>{n.d(l,{R:()=>i,x:()=>c});var t=n(6540);const a={},s=t.createContext(a);function i(e){const l=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:l},e.children)}}}]);