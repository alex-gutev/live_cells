"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[182],{1974:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var t=r(4848),i=r(8453);const l={title:"Error Handling",description:"How to handle errors using two-way data flow",sidebar_position:6},a="Error Handling",s={id:"basics/error-handling",title:"Error Handling",description:"How to handle errors using two-way data flow",source:"@site/docs/basics/error-handling.md",sourceDirName:"basics",slug:"/basics/error-handling",permalink:"/docs/basics/error-handling",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Error Handling",description:"How to handle errors using two-way data flow",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Two-way Data Flow",permalink:"/docs/basics/two-way-data-flow"},next:{title:"State Restoration",permalink:"/docs/basics/state-restoration"}},o={},d=[{value:"Maybe Cells",id:"maybe-cells",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"In the previous section we introduced how to handle numeric input\nusing mutable computed cells. However, we glossed over what happens if\nthe user enters invalid input."}),"\n",(0,t.jsxs)(n.p,{children:["When a cell created by ",(0,t.jsx)(n.code,{children:"mutableString()"})," is assigned a string which\ndoes not represent a valid number, a default value of ",(0,t.jsx)(n.code,{children:"0"})," is\nassigned. This default value can be changed using the ",(0,t.jsx)(n.code,{children:"errorValue"}),"\nargument:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",metastring:'title="Example of mutableString(errorValue: ...)"',children:"final a = MutableCell<num>(0);\n\nfinal strA = a.mutableString(\n  errorValue: -1.cell\n);\n\nstrA.value = 'not a valid number';\n\nprint(a.value); // Prints -1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, cell ",(0,t.jsx)(n.code,{children:"a"})," is assigned a value of ",(0,t.jsx)(n.code,{children:"-1"})," if ",(0,t.jsx)(n.code,{children:"strA"})," is\nassigned a string which does not represent a valid number."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"errorValue"})," is a cell, which allows the default value to be\nchanged dynamically."]})}),"\n",(0,t.jsx)(n.h2,{id:"maybe-cells",children:"Maybe Cells"}),"\n",(0,t.jsxs)(n.p,{children:["This error handling strategy might be sufficient for some cases but\nusually, we want to detect and handle the error rather than assigning\na default value. This can be done with ",(0,t.jsx)(n.code,{children:"Maybe"})," cells. A ",(0,t.jsx)(n.code,{children:"Maybe"})," object\neither holds a value or an exception that was thrown while computing a\nvalue."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Maybe"})," cell can easily be created from a",(0,t.jsx)(n.code,{children:"MutableCell"})," with the\n",(0,t.jsx)(n.code,{children:"maybe()"})," method. The resulting ",(0,t.jsx)(n.code,{children:"Maybe"})," cell is a mutable computed\ncell with the following behaviour:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Its computed value is the value of the argument cell wrapped in a\n",(0,t.jsx)(n.code,{children:"Maybe"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["When the cell's value is set, it sets the value of the argument cell\nto the value wrapped in the ",(0,t.jsx)(n.code,{children:"Maybe"})," if it is holding a value."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Maybe"})," cell provides an ",(0,t.jsx)(n.code,{children:"error"})," property which retrieves a\n",(0,t.jsx)(n.code,{children:"ValueCell"})," that evaluates to the exception held in the ",(0,t.jsx)(n.code,{children:"Maybe"})," or\n",(0,t.jsx)(n.code,{children:"null"})," if the ",(0,t.jsx)(n.code,{children:"Maybe"})," is holding a value. This can be used to\ndetermine whether an error occurred while computing a value."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Maybe"})," is a sealed union of the classes ",(0,t.jsx)(n.code,{children:"MaybeValue"})," and\n",(0,t.jsx)(n.code,{children:"MaybeError"}),". This allows you to handle errors using ",(0,t.jsx)(n.code,{children:"switch"})," and\npattern matching:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"switch (maybe) {\n    case MaybeValue(:final value):\n        /// Do something with `value`\n        \n    case MaybeError(:final error):\n        /// Handle the `error`\n}\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["To handle errors while parsing a number, ",(0,t.jsx)(n.code,{children:"mutableString"})," should be\ncalled on a cell containing a ",(0,t.jsx)(n.code,{children:"Maybe<num>"})," rather than a ",(0,t.jsx)(n.code,{children:"num"}),". We can\nthen check whether the ",(0,t.jsx)(n.code,{children:"error"})," cell is non-null to check if an error\noccurred."]}),"\n",(0,t.jsx)(n.p,{children:"Putting it all together a text field for numeric input, which displays\nan error message when an invalid value is entered, can be implemented\nwith the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",metastring:'title="Numeric text field with error handling"',children:"class NumberField extends CellWidget {\n  final MutableCell<num> n;\n  \n  NumberField(this.n);\n  \n  @override\n  Widget build(BuildContext context) {\n    final maybe = n.maybe();\n    final error = maybe.error;\n    \n    return LiveTextField(\n      content: maybe.mutableString(),\n      decoration: InputDecoration(\n          errorText: error() != null \n              ? 'Please enter a valid number' \n              : null\n      )\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["We've packaged the input field in a ",(0,t.jsx)(n.code,{children:"CellWidget"})," subclass which\ntakes the cell to which to bind the content of the field as an\nargument. This allows us to reuse this error handling logic wherever a\nnumeric input text field is required."]})}),"\n",(0,t.jsxs)(n.p,{children:["Here we're testing whether ",(0,t.jsx)(n.code,{children:"error"})," is non-null, that is whether an\nerror occurred while parsing a number from the text field, and if so\nproviding an error message in the ",(0,t.jsx)(n.code,{children:"errorText"})," of the\n",(0,t.jsx)(n.code,{children:"InputDecoration"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The error message can be made more descriptive by also checking\nwhether the field is empty, or not:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",metastring:'title="Numeric text field with error handling"',children:"class NumberField extends CellWidget {\n  final MutableCell<num> n;\n  \n  NumberField(this.n);\n  \n  @override\n  Widget build(BuildContext context) {\n    final maybe = n.maybe();\n    final content = maybe.mutableString();\n    final error = maybe.error;\n    \n    return LiveTextField(\n      content: content,\n      decoration: InputDecoration(\n          errorText: content().isEmpty \n              ? 'Cannot be empty' \n              : error() != null \n              ? 'Please enter a valid number' \n              : null\n      )\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now that we have a reusable numeric input text field with error\nhandling, let's use it to reimplement the sum example from earlier."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",metastring:'title="Sum example using numberField()"',children:"CellWidget.builder((_) {\n  final a = MutableCell<num>(0);\n  final b = MutableCell<num>(0);\n    \n  final sum = a + b;\n    \n  return Column(\n    children: [\n      Row(\n        children: [\n          NumberField(a),\n          SizedBox(width: 5),\n          Text('+'),\n          SizedBox(width: 5),\n          NumberField(b),\n        ],\n      ),\n      Text('${a()} + ${b()} = ${sum()}'),\n      ElevatedButton(\n        child: Text('Reset'),\n        onPressed: () => MutableCell.batch(() {\n          a.value = 0;\n          b.value = 0;\n        })\n      )\n    ]\n  );\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Notice how we were able to package our text field with error handling\nentirely in a separate class, that can be reused, all without writing\nor passing a single ",(0,t.jsx)(n.code,{children:"onChanged"})," callback and at the same time being\nable to reset the content of the fields simply by changing the values\nof the cells holding our data."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["The same cell should be provided to ",(0,t.jsx)(n.code,{children:"NumberField"})," between builds. Do\nnot conditionally selected between multiple cells. ",(0,t.jsx)(n.strong,{children:"Don't do this"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"NumberField(cond ? n1 : n2)\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Don't do this either"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"cond ? NumberField(n1) : NumberField(n2)\n"})}),(0,t.jsxs)(n.p,{children:["If you need to do this consider adding a key to ",(0,t.jsx)(n.code,{children:"NumberField"})," that\nis changed whenever a different cell is selected."]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);