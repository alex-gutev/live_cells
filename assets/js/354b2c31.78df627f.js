"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[800],{2851:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var i=s(4848),t=s(8453);const l={title:"Lists, Maps and Sets",description:"Working with cells holding lists, maps and sets",sidebar_position:9},c="Lists, Maps and Sets",d={id:"basics/lists-maps-sets",title:"Lists, Maps and Sets",description:"Working with cells holding lists, maps and sets",source:"@site/docs/basics/lists-maps-sets.md",sourceDirName:"basics",slug:"/basics/lists-maps-sets",permalink:"/live_cells/docs/basics/lists-maps-sets",draft:!1,unlisted:!1,editUrl:"https://github.com/alex-gutev/live_cells/docs/basics/lists-maps-sets.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Lists, Maps and Sets",description:"Working with cells holding lists, maps and sets",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"User Defined Types",permalink:"/live_cells/docs/basics/user-defined-types"}},a={},o=[{value:"Indexing",id:"indexing",level:2}];function r(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"lists-maps-and-sets",children:"Lists, Maps and Sets"}),"\n",(0,i.jsxs)(n.p,{children:["Live Cells provides extensions for cells holding ",(0,i.jsx)(n.code,{children:"List"}),"s, ",(0,i.jsx)(n.code,{children:"Map"}),"s and\n",(0,i.jsx)(n.code,{children:"Set"}),"s, which allow the properties of the ",(0,i.jsx)(n.code,{children:"List"}),", ",(0,i.jsx)(n.code,{children:"Map"})," and ",(0,i.jsx)(n.code,{children:"Set"}),"\ninterfaces to be accessed directly on cells."]}),"\n",(0,i.jsx)(n.h2,{id:"indexing",children:"Indexing"}),"\n",(0,i.jsxs)(n.p,{children:["For example the ",(0,i.jsx)(n.code,{children:"[]"})," operator is overloaded for cells holding ",(0,i.jsx)(n.code,{children:"Lists"}),",\nwhich allows a list element to be retrieved."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="List cell operator[] example"',children:"final list = MutableCell([1, 2, 3, 4]);\nfinal index = MutableCell(0);\n\n/// A cell which accesses the element at `index`\nfinal element = list[index];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"element"})," cell retrieves the value of the element at ",(0,i.jsx)(n.code,{children:"index"}),"\nwithin ",(0,i.jsx)(n.code,{children:"list"}),". You'll notice that the definition of the ",(0,i.jsx)(n.code,{children:"element"})," cell\nlooks exactly like retrieving the value of an element from an ordinary\n",(0,i.jsx)(n.code,{children:"List"}),". However, unlike an ordinarily ",(0,i.jsx)(n.code,{children:"List"})," element access, ",(0,i.jsx)(n.code,{children:"element"}),"\nis a cell and its value will be recomputed whenever the ",(0,i.jsx)(n.code,{children:"list"})," and\n",(0,i.jsx)(n.code,{children:"index"}),", which is also a cell, change:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="Reactive list element access"',children:"print(element.value); // 1\n\nelement.value = 2;\nprint(element.value); // 3\n\nlist.value = [3, 9, 27];\nprint(element.value); // 27\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"element"})," cell is also a mutable cell which when set, updates the\nvalue of the ",(0,i.jsx)(n.code,{children:"list"})," element at ",(0,i.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="Modifying list through an element access cell"',children:"final list = MutableCell([1, 2, 3, 4]);\nfinal index = MutableCell(0);\n\nfinal element = list[index];\n\nindex.value = 1;\nelement.value = 100;\n\nprint(list); // 1, 100, 3, 4\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The underlying ",(0,i.jsx)(n.code,{children:"List"})," is not modified but a new ",(0,i.jsx)(n.code,{children:"List"})," is created and\nassigned to the ",(0,i.jsx)(n.code,{children:"list"})," cell."]})}),"\n",(0,i.jsxs)(n.p,{children:["You can also update the ",(0,i.jsx)(n.code,{children:"list"})," element directly using ",(0,i.jsx)(n.code,{children:"[]="}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"list[1] = 100;\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Unlike the ",(0,i.jsx)(n.code,{children:"[]"})," operator, the index provided to the ",(0,i.jsx)(n.code,{children:"[]="})," is a value\nnot a cell."]})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var i=s(6540);const t={},l=i.createContext(t);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);