"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[245],{427:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>r});var l=t(4848),i=t(8453);const a={title:"Meta Cells",description:"Dependency inversion using meta cells",sidebar_position:12},c="Meta Cells",s={id:"basics/meta-cells",title:"Meta Cells",description:"Dependency inversion using meta cells",source:"@site/docs/basics/meta-cells.md",sourceDirName:"basics",slug:"/basics/meta-cells",permalink:"/docs/basics/meta-cells",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Meta Cells",description:"Dependency inversion using meta cells",sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Action Cells",permalink:"/docs/basics/action-cells"},next:{title:"Effect Cells",permalink:"/docs/basics/effect-cells"}},o={},r=[{value:"Mutable and Action Meta Cells",id:"mutable-and-action-meta-cells",level:2},{value:"Differences from Mutable Cells",id:"differences-from-mutable-cells",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"meta-cells",children:"Meta Cells"}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.em,{children:"meta cell"})," is a cell that points to another cell. Accessing the\n",(0,l.jsx)(n.code,{children:"value"})," of a meta cell, accesses the value of the cell it\npoints to. Similarly, observers of the meta cell are notified when the\nvalue of the cell it points to changes."]}),"\n",(0,l.jsxs)(n.p,{children:["Meta cells are created with the ",(0,l.jsx)(n.code,{children:"MetaCell"})," constructor, and initially\ndo not point to any cell."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",metastring:'title="Creating a meta cell"',children:"final m = MetaCell<int>();\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"MetaCell"})," is a generic class with a single type parameter, which is\nthe cell value type, ",(0,l.jsx)(n.code,{children:"int"})," in the example above. This has to be\nspecified manually when creating the ",(0,l.jsx)(n.code,{children:"MetaCell"}),", since the constructor\ndoes not take any arguments, from which it can be deduced."]})}),"\n",(0,l.jsxs)(n.p,{children:["Observers can be added and removed before the meta cell is pointing to\nanother cell, but accessing its value will result in an\n",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/live_cells/latest/live_cells/EmptyMetaCellError-class.html",children:(0,l.jsx)(n.code,{children:"EmptyMetaCellError"})}),"\nexception being thrown."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"// This is OK\nm.addObserver(...)\n\n// This will throw EmptyMetaCellError\nprint(m.value)\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The cell to which a meta cell points to is set with the\n",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/live_cells/latest/live_cells/MetaCell/inject.html",children:(0,l.jsx)(n.code,{children:"inject"})}),"\nmethod, which takes the cell as an argument. Once a cell has been\n",(0,l.jsx)(n.em,{children:"injected"})," in a meta cell, accessing the meta cell's value returns the\nvalue of the injected cell."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"inject"})," method can be called multiple times. If the meta cell,\nalready points to a cell when ",(0,l.jsx)(n.code,{children:"inject"})," is called, the meta cell now\npoints to the new cell. The value of the meta cell is the value of the\nnewly ",(0,l.jsx)(n.em,{children:"injected cell"}),", and similarly the observers of the meta cell\nare notified whenever the observers of the injected cell are notified."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",metastring:".inject() method",children:"final a = MutableCell(0);\nfinal b = MutableCell(1);\n\nfinal m = MetaCell<int>();\n\n// Called when `m` notifies its observers\nValueCell.watch(() => print(m()));\n\nm.inject(a);\n\na.value = 2; // Prints 2\na.value = 3; // Prints 3\n\nm.inject(b);\n\n// Doesn't print anything since `m` no\n// longer points to `a`\na.value = 4;\n\n// Prints 15\nb.value = 15;\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"important",children:(0,l.jsxs)(n.p,{children:["A meta cell ",(0,l.jsx)(n.strong,{children:"does not"})," notify its observers when the cell it points\nto is changed with ",(0,l.jsx)(n.code,{children:".inject"}),"."]})}),"\n",(0,l.jsx)(n.admonition,{type:"caution",children:(0,l.jsxs)(n.p,{children:["A meta cell has to be observed before ",(0,l.jsx)(n.code,{children:".inject"})," can be called. If\n",(0,l.jsx)(n.code,{children:".inject"})," is called before the cell is observed\n",(0,l.jsx)(n.code,{children:"InactiveMetaCelLError"})," is thrown. You will have noticed the cell\nwatch function is defined before ",(0,l.jsx)(n.code,{children:".inject"})," is called."]})}),"\n",(0,l.jsxs)(n.p,{children:["Meta cells allow for a rudimentary form of ",(0,l.jsx)(n.em,{children:"dependency\ninversion"}),". They are useful when you need to observe a cell without\ncontrolling how the cell is created."]}),"\n",(0,l.jsxs)(n.p,{children:["You may have noticed that an unhandled ",(0,l.jsx)(n.code,{children:"EmptyMetaCellError"})," exception\nnotice is being printed to the console. This is because the watch\nfunction is called initially when it is defined. At that point the\nmeta cell does not point to any cell when its value is accessed, which\nresults in the ",(0,l.jsx)(n.code,{children:"EmptyMetaCellError"})," exception being thrown."]}),"\n",(0,l.jsxs)(n.p,{children:["You can silence these notices with the ",(0,l.jsx)(n.code,{children:".whenReady"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final m = MetaCell<int>();\n\n// Called when `m` notifies its observers\nValueCell.watch(() => print(m.whenReady()));\n"})}),"\n",(0,l.jsxs)(n.p,{children:["When ",(0,l.jsx)(n.code,{children:".whenReady"})," is used within a watch function it aborts the watch\nfunction, if the meta cell does not point to any cell, without\nprinting a notice to the console."]}),"\n",(0,l.jsx)(n.h2,{id:"mutable-and-action-meta-cells",children:"Mutable and Action Meta Cells"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"MutableMetaCell"})," and ",(0,l.jsx)(n.code,{children:"ActionMetaCell"})," are variants of ",(0,l.jsx)(n.code,{children:"MetaCell"}),"s\nwhich allow you to set the value of a mutable cell and trigger an\naction cell, respectively, from a ",(0,l.jsx)(n.code,{children:"MetaCell"}),". A ",(0,l.jsx)(n.code,{children:"MutableMetaCell"})," and\n",(0,l.jsx)(n.code,{children:"ActionMetaCell"})," can be created with ",(0,l.jsx)(n.code,{children:"MetaCell.mutable"})," and\n",(0,l.jsx)(n.code,{children:"MetaCell.action"})," respectively."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",metastring:'title="Mutable/Action meta cells"',children:"final m = MetaCell.mutable<int>();\nfinal a = MetaCell.action();\n\n...\n\n// Set the value of the MutableCell pointed to by `m`\nm.value = 2;\n\n// Trigger the ActionCell pointed to by `a`\na.trigger();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"differences-from-mutable-cells",children:"Differences from Mutable Cells"}),"\n",(0,l.jsx)(n.p,{children:"Meta cells are different from mutable cells, in that a meta cell does\nnot actually implement the functionality of a cell but delegates its\nimplementation to the cell it points to, whereas a mutable cell is an\nactual implementation of a cell that can have its value set."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>s});var l=t(6540);const i={},a=l.createContext(i);function c(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),l.createElement(a.Provider,{value:n},e.children)}}}]);