"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[960],{6986:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>r});var i=t(4848),l=t(8453);const s={title:"Cells in Widgets",description:"Using cells in widgets",sidebar_position:2},c="Cells in Widgets",d={id:"basics/cell-widgets",title:"Cells in Widgets",description:"Using cells in widgets",source:"@site/docs/basics/cell-widgets.md",sourceDirName:"basics",slug:"/basics/cell-widgets",permalink:"/live_cells/docs/basics/cell-widgets",draft:!1,unlisted:!1,editUrl:"https://github.com/alex-gutev/live_cells/docs/basics/cell-widgets.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Cells in Widgets",description:"Using cells in widgets",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Cells",permalink:"/live_cells/docs/basics/cells"},next:{title:"Cell Expressions",permalink:"/live_cells/docs/basics/cell-expressions"}},o={},r=[{value:"Defining cells directly in the build method",id:"defining-cells-directly-in-the-build-method",level:2},{value:"Subclassing CellWidget",id:"subclassing-cellwidget",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"cells-in-widgets",children:"Cells in Widgets"}),"\n",(0,i.jsx)(n.p,{children:"Cells would be pretty boring if you could not use them in widgets."}),"\n",(0,i.jsxs)(n.p,{children:["The simplest way to use the value of a cell in a widget is with\n",(0,i.jsx)(n.code,{children:"CellWidget.builder"}),", which creates a widget that observes one or more\ncells. Whenever the values of the observed cells change, the widget is\nrebuilt."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="CellWidget.builder"',children:"CellWidget.builder((context) => Text('Count: ${count()}'));\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The example above creates a widget that observes the value of a\n",(0,i.jsx)(n.code,{children:"count"})," cell and displays it in a ",(0,i.jsx)(n.code,{children:"Text"})," widget. Whenever the value of\n",(0,i.jsx)(n.code,{children:"count"})," changes, the widget is rebuilt."]}),"\n",(0,i.jsx)(n.p,{children:"Let's put this together to build a simple counter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="Counter using cells"',children:"class Counter extends StatefulWidget {\n    @override\n    State<Counter> createState() => _CounterState();\n}\n\nclass _CounterState extends State<Counter> {\n    final count = MutableCell(0);\n\n    @override\n    Widget build(BuildContext context) => ElevatedButton(\n        child: CellWidget.Builder((_) => Text('${count()}')),\n        onPressed: () => count.value++\n    );\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The example above:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Defines a button which increments a ",(0,i.jsx)(n.code,{children:"count"})," cell when pressed."]}),"\n",(0,i.jsxs)(n.li,{children:["The value of the ",(0,i.jsx)(n.code,{children:"count"})," cell is displayed in the child of the\n",(0,i.jsx)(n.code,{children:"ElevatedButton"})," using ",(0,i.jsx)(n.code,{children:"CellWidget.Builder"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Pressing the button results in the widget being rebuilt and hence\nthe new counter value being displayed."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Unlike ",(0,i.jsx)(n.code,{children:"ValueNotifier"})," and ",(0,i.jsx)(n.code,{children:"ChangeNotifier"})," you don't have to call\n",(0,i.jsx)(n.code,{children:"dispose"})," on cells."]})}),"\n",(0,i.jsx)(n.h2,{id:"defining-cells-directly-in-the-build-method",children:"Defining cells directly in the build method"}),"\n",(0,i.jsxs)(n.p,{children:["In the previous section the ",(0,i.jsx)(n.code,{children:"count"})," cell, which holds the value of the\ncounter, is stored in the ",(0,i.jsx)(n.code,{children:"State"})," class of a ",(0,i.jsx)(n.code,{children:"StatefulWidget"}),". This is\na good starting point, but it will quickly get tiring if you need to\ndefine cells that depend on other cells also defined in the same\n",(0,i.jsx)(n.code,{children:"State"})," class. Besides that having to use a ",(0,i.jsx)(n.code,{children:"StatefulWidget"})," just to\ndefine a cell is verbose and annoying."]}),"\n",(0,i.jsxs)(n.p,{children:["Luckily ",(0,i.jsx)(n.code,{children:"CellWidget"})," provides functionality for defining cells\ndirectly in the widget build function. The ",(0,i.jsx)(n.code,{children:"cell"})," method, of the\n",(0,i.jsx)(n.code,{children:"context"})," parameter passed to the widget builder function, creates a\ncell which is persisted between builds of the widget."]}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"CellWidget.builder"}),", the counter can be implemented as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="Defining cells using context.cell"',children:"Widget counter() => CellWidget.builder((context) {\n    final count = context.cell(() => MutableCell(0));\n\n    return ElevatedButton(\n        child: Text('${count()}'),\n        onPressed: count.value++\n    );\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"count"})," cell is defined directly in the build function of\n",(0,i.jsx)(n.code,{children:"CellWidget.builder"}),", using ",(0,i.jsx)(n.code,{children:"context.cell"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"cell"})," method takes a function which defines the cell. This\nfunction is called the first time the widget is built. On subsequent\nbuilds, the cell created during the first build is returned."]}),"\n",(0,i.jsxs)(n.p,{children:["This is functionally equivalent to the implementation using\n",(0,i.jsx)(n.code,{children:"StatefulWidget"}),", however much more succinct."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"cell"})," method can be used to define multiple cells in a single\nbuild function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="Multiple cells defined using context.cell"',children:"CellWidget.builder((context) {\n    final count1 = context.cell(() => MutableCell(0));\n    final count2 = context.cell(() => MutableCell(0));\n\n    return Column(\n        children: [\n            ElevatedButton(\n                child: Text('${count1()}'),\n                onPressed: count1.value++\n            ),\n            ElevatedButton(\n                child: Text('${count2()}'),\n                onPressed: count2.value++\n            )\n        ]\n    );\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, two separate cells are defined in a single\nbuild function using ",(0,i.jsx)(n.code,{children:"context.cell"}),", each representing a different\ncounter."]}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsxs)(n.p,{children:["Calls to ",(0,i.jsx)(n.code,{children:"context.cell"})," should not be placed in:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Conditionals"}),"\n",(0,i.jsx)(n.li,{children:"Loops"}),"\n",(0,i.jsxs)(n.li,{children:["Nested widget builder functions such as those used with ",(0,i.jsx)(n.code,{children:"Builder"}),"\nand ",(0,i.jsx)(n.code,{children:"ValueListenableBuilder"}),"."]}),"\n"]})]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"context.cell"})," should only be called on the ",(0,i.jsx)(n.code,{children:"BuildContext"})," of a widget\ncreated using ",(0,i.jsx)(n.code,{children:"CellWidget.builder"}),", or a ",(0,i.jsx)(n.code,{children:"CellWidget"})," subclass that\nmixes in ",(0,i.jsx)(n.code,{children:"CellInitializer"}),", more on this in the next section."]})}),"\n",(0,i.jsxs)(n.p,{children:["You can also define watch functions within ",(0,i.jsx)(n.code,{children:"CellWidget.builder"})," using\n",(0,i.jsx)(n.code,{children:"context.watch"}),". Like ",(0,i.jsx)(n.code,{children:"context.cell"}),", the watch function is only set up\nduring the first build. Unlike a watch function defined using\n",(0,i.jsx)(n.code,{children:"ValueCell.watch"}),", the watch function is automatically stopped when\nthe ",(0,i.jsx)(n.code,{children:"CellWidget"}),", in which it is defined, is removed from the tree."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="Watch function in widget"',children:"Widget counter() => CellWidget.builder((context) {\n    final count = context.cell(() => MutableCell(0));\n\n    context.watch(() => print('Count ${count()}'));\n\n    return ElevatedButton(\n        child: Text('${count()}'),\n        onPressed: count.value++\n    );\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"subclassing-cellwidget",children:"Subclassing CellWidget"}),"\n",(0,i.jsxs)(n.p,{children:["If you prefer subclassing you can subclass ",(0,i.jsx)(n.code,{children:"CellWidget"})," and override\nits build method, instead of passing a build function to\n",(0,i.jsx)(n.code,{children:"CellWidget.builder"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE"}),": To use the ",(0,i.jsx)(n.code,{children:"cell"})," and ",(0,i.jsx)(n.code,{children:"watch"})," methods, the mixin\n",(0,i.jsx)(n.code,{children:"CellInitializer"})," has to be included by the subclass. This mixin\nalso provides ",(0,i.jsx)(n.code,{children:"cell"})," and ",(0,i.jsx)(n.code,{children:"watch"})," methods directly to the subclass."]}),"\n",(0,i.jsxs)(n.p,{children:["The counter example using a ",(0,i.jsx)(n.code,{children:"CellWidget"})," subclass:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",metastring:'title="CellWidget subclass"',children:"class Counter extends CellWidget with CellInitializer {\n    @override\n    Widget build(BuildContext context) {\n        final count = cell(() => MutableCell(0));\n\n        return ElevatedButton(\n            child: Text('${count()}'),\n            onPressed: count.value++\n        );\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var i=t(6540);const l={},s=i.createContext(l);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);